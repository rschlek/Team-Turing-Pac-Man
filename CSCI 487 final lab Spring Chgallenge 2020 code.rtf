{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red28\green34\blue42;\red202\green202\blue202;
\red89\green138\blue67;\red67\green192\blue160;\red212\green214\blue154;\red70\green137\blue204;\red167\green197\blue152;
\red194\green126\blue101;\red140\green211\blue254;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c14510\c18039\c21961;\cssrgb\c83137\c83137\c83137;
\cssrgb\c41569\c60000\c33333;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c33725\c61176\c83922;\cssrgb\c70980\c80784\c65882;
\cssrgb\c80784\c56863\c47059;\cssrgb\c61176\c86275\c99608;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  sys\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  math\cb1 \
\
\cf5 \cb3 \strokec5 # Grab the pellets as fast as you can!\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 # width: size of the grid\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 # height: top left corner is (x=0, y=0)\cf4 \cb1 \strokec4 \
\cb3 width, height = [\cf6 \strokec6 int\cf4 \strokec4 (i) \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 input\cf4 \strokec4 ().split()]\cb1 \
\cf2 \cb3 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 range\cf4 \strokec4 (height):\cb1 \
\cb3     row = \cf7 \strokec7 input\cf4 \strokec4 ()  \cf5 \strokec5 # one line of the grid: space " " is floor, pound "#" is wall\cf4 \cb1 \strokec4 \
\
\
\cf5 \cb3 \strokec5 # game loop\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 while\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cb1 \
\cb3     my_score, opponent_score = [\cf6 \strokec6 int\cf4 \strokec4 (i) \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 input\cf4 \strokec4 ().split()]\cb1 \
\cb3     visible_pac_count = \cf6 \strokec6 int\cf4 \strokec4 (\cf7 \strokec7 input\cf4 \strokec4 ())  \cf5 \strokec5 # all your pacs and enemy pacs in sight\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 range\cf4 \strokec4 (visible_pac_count):\cb1 \
\cb3         inputs = \cf7 \strokec7 input\cf4 \strokec4 ().split()\cb1 \
\cb3         pac_id = \cf6 \strokec6 int\cf4 \strokec4 (inputs[\cf9 \strokec9 0\cf4 \strokec4 ])  \cf5 \strokec5 # pac number (unique within a team)\cf4 \cb1 \strokec4 \
\cb3         mine = inputs[\cf9 \strokec9 1\cf4 \strokec4 ] != \cf10 \strokec10 "0"\cf4 \strokec4   \cf5 \strokec5 # true if this pac is yours\cf4 \cb1 \strokec4 \
\cb3         x = \cf6 \strokec6 int\cf4 \strokec4 (inputs[\cf9 \strokec9 2\cf4 \strokec4 ])  \cf5 \strokec5 # position in the grid\cf4 \cb1 \strokec4 \
\cb3         y = \cf6 \strokec6 int\cf4 \strokec4 (inputs[\cf9 \strokec9 3\cf4 \strokec4 ])  \cf5 \strokec5 # position in the grid\cf4 \cb1 \strokec4 \
\cb3         type_id = inputs[\cf9 \strokec9 4\cf4 \strokec4 ]  \cf5 \strokec5 # unused in wood leagues\cf4 \cb1 \strokec4 \
\cb3         speed_turns_left = \cf6 \strokec6 int\cf4 \strokec4 (inputs[\cf9 \strokec9 5\cf4 \strokec4 ])  \cf5 \strokec5 # unused in wood leagues\cf4 \cb1 \strokec4 \
\cb3         ability_cooldown = \cf6 \strokec6 int\cf4 \strokec4 (inputs[\cf9 \strokec9 6\cf4 \strokec4 ])  \cf5 \strokec5 # unused in wood leagues\cf4 \cb1 \strokec4 \
\cb3     visible_pellet_count = \cf6 \strokec6 int\cf4 \strokec4 (\cf7 \strokec7 input\cf4 \strokec4 ())  \cf5 \strokec5 # all pellets in sight\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 range\cf4 \strokec4 (visible_pellet_count):\cb1 \
\cb3         \cf5 \strokec5 # value: amount of points this pellet is worth\cf4 \cb1 \strokec4 \
\cb3         x, y, value = [\cf6 \strokec6 int\cf4 \strokec4 (j) \cf2 \strokec2 for\cf4 \strokec4  j \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 input\cf4 \strokec4 ().split()]\cb1 \
\
\cb3     \cf5 \strokec5 # Write an action using print\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 # To debug: print("Debug messages...", file=sys.stderr, flush=True)\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 # MOVE <pacId> <x> <y>\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 print\cf4 \strokec4 (\cf10 \strokec10 "MOVE 0 15 10"\cf4 \strokec4 )\cb1 \
\
\
\cb3     \cf8 \strokec8 class\cf4 \strokec4  \cf6 \strokec6 Pac\cf4 \strokec4 :\cb1 \
\
\cb3     \cf5 \strokec5 #    id_num\cf4 \cb1 \strokec4 \
\cb3      \cf5 \strokec5 #   type_id\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 #    location = Vector2(0, 0) # a vector 2 containing an x and y value to denote position\cf4 \cb1 \strokec4 \
\cb3      \cf5 \strokec5 #   enemy # a boolean denoting if the pac is an enemy or not, true if enemy. If true, only the location and type_id fields are relevant\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 #  attack_mode = False\cf4 \cb1 \strokec4 \
\cb3        \cf5 \strokec5 # next_destination\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 #ability_cooldown # an int representing the level of the ability meter. 10 = full, 0 = usable\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 #        speed_turns_left # an int denoting the number of turns left for the speed boost\cf4 \cb1 \strokec4 \
\cb3  \cf5 \strokec5 #       meter_full = true\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 #      pac_chasing # the enemy Pac that is/was-recently in view that is being chased by this pac\cf4 \cb1 \strokec4 \
\cb3    \cf5 \strokec5 #     enemy_in_view = false \cf4 \cb1 \strokec4 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 __init__\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 id_num\cf4 \strokec4 , \cf11 \strokec11 type_id\cf4 \strokec4 , \cf11 \strokec11 location\cf4 \strokec4 , \cf11 \strokec11 next_destination\cf4 \strokec4 , \cf11 \strokec11 enemy\cf4 \strokec4 : \cf6 \strokec6 bool\cf4 \strokec4 , \cf11 \strokec11 ability_cooldown\cf4 \strokec4 : \cf6 \strokec6 int\cf4 \strokec4 , \cf11 \strokec11 speed_turns_left\cf4 \strokec4 : \cf6 \strokec6 int\cf4 \strokec4 ):\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .id_num = id_num\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .type_id = type_id\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .location = location\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .enemy = enemy\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .ability_cooldown = ability_cooldown\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .speed_turns_left = speed_turns_left\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .attacking = \cf8 \strokec8 False\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .next_destination = next_destination\cb1 \
\
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 play\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 enemy\cf4 \strokec4  = \cf8 \strokec8 None\cf4 \strokec4 ): \cf5 \strokec5 # to be called every turn by the gameplayloop in main, this way only one function call must be done on the object and all logic for each pac will run internally\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .update_ability_meter()\cb1 \
\
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .attacking:\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .attack_mode(enemy)\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .gather_mode()\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 attack_mode\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 enemy\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .pac_chasing != \cf8 \strokec8 None\cf4 \strokec4 :\cb1 \
\cb3                 next_location = \cf8 \strokec8 self\cf4 \strokec4 .id_num + \cf10 \strokec10 " "\cf4 \strokec4  + \cf8 \strokec8 self\cf4 \strokec4 .pac_chasing.position.x + \cf10 \strokec10 " "\cf4 \strokec4  + \cf8 \strokec8 self\cf4 \strokec4 .pac_chasing.position.y\cb1 \
\cb3                 \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .next_destination != next_location:\cb1 \
\cb3                     next_destination = next_location\cb1 \
\cb3                     \cf7 \strokec7 print\cf4 \strokec4 (next_destination)\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 gather_mode\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 pass\cf4 \cb1 \strokec4 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 update_ability_meter\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .ability_cooldown == \cf9 \strokec9 0\cf4 \strokec4 :\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .meter_full()\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .ability_cooldown = \cf9 \strokec9 10\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .ability_cooldown -= \cf9 \strokec9 1\cf4 \cb1 \strokec4 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 meter_full\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .attacking:\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .change_type()\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 \cf8 \strokec8 self\cf4 \strokec4 .speed_boost()\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 change_type\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 pass\cf4 \cb1 \strokec4 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 speed_boost\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ):\cb1 \
\cb3             \cf7 \strokec7 print\cf4 \strokec4 (\cf8 \strokec8 self\cf4 \strokec4 .id_num + \cf10 \strokec10 " SPEED"\cf4 \strokec4 )\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 get_location\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ): \cf5 \strokec5 # -> Vector2:\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \cf8 \strokec8 self\cf4 \strokec4 .location\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 set_location\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 x\cf4 \strokec4 , \cf11 \strokec11 y\cf4 \strokec4 ):\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .location.x = x\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .location.y = y\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 is_stuck\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 ) -> \cf6 \strokec6 bool\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \cf8 \strokec8 False\cf4 \strokec4  \cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 see_enemy\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 enemy\cf4 \strokec4 ):\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .pac_chasing = enemy\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .attacking = \cf8 \strokec8 True\cf4 \cb1 \strokec4 \
\
\
\cb3         \cb1 \
\
\cb3         \cb1 \
\
\
\
\cb3     \cf8 \strokec8 class\cf4 \strokec4  \cf6 \strokec6 Vector2\cf4 \strokec4 :\cb1 \
\
\cb3         \cf8 \strokec8 def\cf4 \strokec4  \cf7 \strokec7 __init__\cf4 \strokec4 (\cf11 \strokec11 self\cf4 \strokec4 , \cf11 \strokec11 x\cf4 \strokec4 , \cf11 \strokec11 y\cf4 \strokec4 ):\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .x = x\cb1 \
\cb3             \cf8 \strokec8 self\cf4 \strokec4 .y = y\cb1 \
\
}